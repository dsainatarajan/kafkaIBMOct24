Day3:
Offset
Multinode Kafka
Fault tolerance
Kafka TOpic Administration
Java Producer
Java Consumer
Java Advanced Producer settings
Java Advanced Consumer Settings




Kafka originated -> Linked(2005 to 2009)
2010 to 2011 -> Linked opensourced the kafka project => Apache Foundation
Bigdata => Hortonworks, Cloudera, IBM, etc
Right now -> Kafka 3.8.x
Kafka Presentation

topic1-0		=> P0
	000000000001.log	-> 50mb	000000000001.index  0001time.index
	000000000002.log	-> 50mb	000000000002.index  0002time.index
	000000000003.log	-> 50mb	000000000003.index  0003time.index

topic1-1		=> P1
	000000000001.log		-> 50mb

Break from 11.25 to 11.40 AM!


Multinode Kafka cluster


zookeeper client port			-> 2181
Kafka broker client port		-> 9092
bootstrap-server		-> 9092

kafka-topics.sh --describe --bootstrap-server kafka1:9092,kafka2:9092 --topic testtopic1
Topic: testtopic1       TopicId: Mj3eYv1FTfW1peFqcM95Yg PartitionCount: 3       ReplicationFactor: 2    Configs:
		PartitionID		BrokerID		BrokerID	
Partition: 0  		 Leader: 2   Replicas: 2,1   Isr: 2,1
Partition: 1  		 Leader: 3   Replicas: 3,2   Isr: 3,2
Partition: 2  		 Leader: 1   Replicas: 1,3   Isr: 1,3

Partitions		-> Performance
Replication		-> Fault Tolerance
ISR -> In Sync Replicas  => replica is reachable, healthy
Apache Kafka 					=> totally free, any one can download, modify and sell for free or for license with or without code as opensource
Confluence Kafka Open Source 	-> community edition, lacks features
Confluence Kafka Enterprise 	-> Support & paid license, enterprise ready

Download the kafka:
https://kafka.apache.org/downloads
https://archive.apache.org/dist/kafka/

If the messages are same and needs to be consumed by 2 different applications:
	1. Put all the messages on the same topic
	2. Launch each of the application as a seperate consumer group
	3. Every message will be delivered once to each group

If the messages are different and needs to be consumed by 2 different applications:
	1. Put the messages for each application into it's own topic
	2. Launch each of the application on it's own topic as a consumer group
	3. Every message will be consumed by the consumer group from it's own topic



kafka-topics.sh --describe		=> topic layout

ISR	-> In Sync Replicas, partitions not reachable will not be listed under the ISR column

Brokers 	-> Nodes
TOpics 		-> Queues
Partitions	-> Topic can have 1 or more partitions
Isr -> In Sync Replicas

Creating a topic with replication 2 and partitions 3, describe command output
Topic: testtopic1	TopicId: hTCa_aowS5GFftFZDbXIzQ	PartitionCount: 3	ReplicationFactor: 2	Configs: 
	Topic: testtopic1	Partition: 0	Leader: 2	Replicas: 2,3	Isr: 2,3
	Topic: testtopic1	Partition: 1	Leader: 3	Replicas: 3,1	Isr: 3,1
	Topic: testtopic1	Partition: 2	Leader: 1	Replicas: 1,2	Isr: 1,2

Broker 3 down:
Topic: testtopic1	TopicId: hTCa_aowS5GFftFZDbXIzQ	PartitionCount: 3	ReplicationFactor: 2	Configs: 
	Topic: testtopic1	Partition: 0	Leader: 2	Replicas: 2,3	Isr: 2
	Topic: testtopic1	Partition: 1	Leader: 1	Replicas: 3,1	Isr: 1
	Topic: testtopic1	Partition: 2	Leader: 1	Replicas: 1,2	Isr: 1,2

I have no name!@a989e0c3b146:/$ kafka-topics.sh --describe --bootstrap-server kafka1:9092,kafka2:9092 --topic testtopic3
Topic: testtopic3	TopicId: uPCnbZgXTfybkXmL-avYBA	PartitionCount: 3	ReplicationFactor: 1	Configs: 
	Topic: testtopic3	Partition: 0	Leader: 1	Replicas: 1	Isr: 1
	Topic: testtopic3	Partition: 1	Leader: 2	Replicas: 2	Isr: 2
	Topic: testtopic3	Partition: 2	Leader: none Replicas: 3 Isr: 3


Setting up kafka on linux
Installing Kafka on ubuntu container & starting the services











